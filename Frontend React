// Frontend code structure for Expense Manager using React

// File: src/App.js
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import { Container } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import './App.css';

import Navbar from './components/Navbar';
import Dashboard from './components/Dashboard';
import AddExpense from './components/AddExpense';
import ExpenseTable from './components/ExpenseTable';
import ExpenseAnalysis from './components/ExpenseAnalysis';
import Help from './components/Help';
import ShareWithFriends from './components/ShareWithFriends';

function App() {
  return (
    <Router>
      <div className="App">
        <Navbar />
        <Container className="mt-4">
          <Switch>
            <Route exact path="/" component={Dashboard} />
            <Route path="/add-expense" component={AddExpense} />
            <Route path="/expense-table" component={ExpenseTable} />
            <Route path="/expense-analysis" component={ExpenseAnalysis} />
            <Route path="/help" component={Help} />
            <Route path="/share" component={ShareWithFriends} />
          </Switch>
        </Container>
      </div>
    </Router>
  );
}

export default App;

// File: src/components/Navbar.js
import React from 'react';
import { Navbar, Nav, Container } from 'react-bootstrap';
import { Link } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';

const NavigationBar = () => {
  return (
    <Navbar bg="dark" variant="dark" expand="lg">
      <Container>
        <Navbar.Brand as={Link} to="/">
          <h2>Expense Manager</h2>
        </Navbar.Brand>
        <Navbar.Toggle aria-controls="basic-navbar-nav" />
        <Navbar.Collapse id="basic-navbar-nav">
          <Nav className="ms-auto">
            <Nav.Link as={Link} to="/">Dashboard</Nav.Link>
            <Nav.Link as={Link} to="/share">Share</Nav.Link>
            <Nav.Link as={Link} to="/help">
              <FontAwesomeIcon icon={faQuestionCircle} /> Help
            </Nav.Link>
          </Nav>
        </Navbar.Collapse>
      </Container>
    </Navbar>
  );
};

export default NavigationBar;

// File: src/components/Dashboard.js
import React from 'react';
import { Card, Button, Row, Col } from 'react-bootstrap';
import { Link } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlus, faTable, faChartPie } from '@fortawesome/free-solid-svg-icons';

const Dashboard = () => {
  return (
    <div>
      <h1 className="text-center mb-4">Welcome to Your Expense Manager</h1>
      <Row className="justify-content-center">
        <Col md={4} className="mb-3">
          <Card className="text-center h-100">
            <Card.Body>
              <FontAwesomeIcon icon={faPlus} size="3x" className="mb-3" />
              <Card.Title>Add Expense</Card.Title>
              <Card.Text>
                Record a new expense with details like amount, category, and date
              </Card.Text>
              <Link to="/add-expense">
                <Button variant="primary">Add New</Button>
              </Link>
            </Card.Body>
          </Card>
        </Col>
        <Col md={4} className="mb-3">
          <Card className="text-center h-100">
            <Card.Body>
              <FontAwesomeIcon icon={faTable} size="3x" className="mb-3" />
              <Card.Title>Expense Table</Card.Title>
              <Card.Text>
                View all your recorded expenses in a detailed table format
              </Card.Text>
              <Link to="/expense-table">
                <Button variant="primary">View Table</Button>
              </Link>
            </Card.Body>
          </Card>
        </Col>
        <Col md={4} className="mb-3">
          <Card className="text-center h-100">
            <Card.Body>
              <FontAwesomeIcon icon={faChartPie} size="3x" className="mb-3" />
              <Card.Title>Expense Analysis</Card.Title>
              <Card.Text>
                Analyze your spending habits with visual charts and insights
              </Card.Text>
              <Link to="/expense-analysis">
                <Button variant="primary">View Analysis</Button>
              </Link>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default Dashboard;

// File: src/components/AddExpense.js
import React, { useState } from 'react';
import { Form, Button, Card, Alert } from 'react-bootstrap';
import axios from 'axios';

const AddExpense = () => {
  const [expense, setExpense] = useState({
    title: '',
    amount: '',
    category: 'Food',
    date: new Date().toISOString().substr(0, 10),
    description: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const categories = [
    'Food', 'Transportation', 'Housing', 'Utilities', 
    'Entertainment', 'Shopping', 'Healthcare', 'Education',
    'Travel', 'Personal Care', 'Other'
  ];

  const handleChange = (e) => {
    const { name, value } = e.target;
    setExpense(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const response = await axios.post('http://localhost:5000/api/expenses', expense);
      setSuccess('Expense added successfully!');
      setExpense({
        title: '',
        amount: '',
        category: 'Food',
        date: new Date().toISOString().substr(0, 10),
        description: ''
      });
    } catch (err) {
      setError(err.response?.data?.message || 'Something went wrong');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <h2 className="text-center mb-4">Add New Expense</h2>
      <Card className="shadow-sm">
        <Card.Body>
          {error && <Alert variant="danger">{error}</Alert>}
          {success && <Alert variant="success">{success}</Alert>}
          
          <Form onSubmit={handleSubmit}>
            <Form.Group className="mb-3">
              <Form.Label>Expense Title</Form.Label>
              <Form.Control
                type="text"
                name="title"
                value={expense.title}
                onChange={handleChange}
                placeholder="Dinner, Grocery shopping, etc."
                required
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Amount</Form.Label>
              <Form.Control
                type="number"
                name="amount"
                value={expense.amount}
                onChange={handleChange}
                placeholder="Enter amount"
                min="0"
                step="0.01"
                required
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Category</Form.Label>
              <Form.Control
                as="select"
                name="category"
                value={expense.category}
                onChange={handleChange}
                required
              >
                {categories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </Form.Control>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Date</Form.Label>
              <Form.Control
                type="date"
                name="date"
                value={expense.date}
                onChange={handleChange}
                required
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Description (Optional)</Form.Label>
              <Form.Control
                as="textarea"
                name="description"
                value={expense.description}
                onChange={handleChange}
                rows={3}
                placeholder="Add any additional details here"
              />
            </Form.Group>

            <div className="d-grid">
              <Button variant="primary" type="submit" disabled={loading}>
                {loading ? 'Adding...' : 'Add Expense'}
              </Button>
            </div>
          </Form>
        </Card.Body>
      </Card>
    </div>
  );
};

export default AddExpense;

// File: src/components/ExpenseTable.js
import React, { useState, useEffect } from 'react';
import { Table, Form, InputGroup, Card, Button, Spinner } from 'react-bootstrap';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSearch, faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';
import axios from 'axios';

const ExpenseTable = () => {
  const [expenses, setExpenses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [search, setSearch] = useState('');
  const [sortField, setSortField] = useState('date');
  const [sortDirection, setSortDirection] = useState('desc');
  
  useEffect(() => {
    fetchExpenses();
  }, []);

  const fetchExpenses = async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/expenses');
      setExpenses(response.data);
      setLoading(false);
    } catch (err) {
      setError('Failed to fetch expenses');
      setLoading(false);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this expense?')) {
      try {
        await axios.delete(`http://localhost:5000/api/expenses/${id}`);
        setExpenses(expenses.filter(expense => expense._id !== id));
      } catch (err) {
        setError('Failed to delete expense');
      }
    }
  };

  const handleSort = (field) => {
    if (field === sortField) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const getSortIcon = (field) => {
    if (field !== sortField) return null;
    return sortDirection === 'asc' ? '↑' : '↓';
  };

  const sortedExpenses = [...expenses].sort((a, b) => {
    if (sortField === 'amount') {
      return sortDirection === 'asc' ? a.amount - b.amount : b.amount - a.amount;
    } else if (sortField === 'date') {
      return sortDirection === 'asc' 
        ? new Date(a.date) - new Date(b.date) 
        : new Date(b.date) - new Date(a.date);
    } else {
      return sortDirection === 'asc'
        ? a[sortField].localeCompare(b[sortField])
        : b[sortField].localeCompare(a[sortField]);
    }
  });

  const filteredExpenses = sortedExpenses.filter(expense => 
    expense.title.toLowerCase().includes(search.toLowerCase()) ||
    expense.category.toLowerCase().includes(search.toLowerCase()) ||
    expense.description.toLowerCase().includes(search.toLowerCase())
  );

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  if (loading) {
    return (
      <div className="text-center mt-5">
        <Spinner animation="border" role="status">
          <span className="visually-hidden">Loading...</span>
        </Spinner>
      </div>
    );
  }

  return (
    <div>
      <h2 className="text-center mb-4">Expense History</h2>

      <Card className="mb-4 shadow-sm">
        <Card.Body>
          <InputGroup className="mb-3">
            <InputGroup.Text>
              <FontAwesomeIcon icon={faSearch} />
            </InputGroup.Text>
            <Form.Control
              placeholder="Search expenses..."
              value={search}
              onChange={(e) => setSearch(e.target.value)}
            />
          </InputGroup>

          {error && <p className="text-danger">{error}</p>}
          
          <div className="table-responsive">
            <Table striped hover>
              <thead>
                <tr>
                  <th onClick={() => handleSort('date')}>
                    Date {getSortIcon('date')}
                  </th>
                  <th onClick={() => handleSort('title')}>
                    Title {getSortIcon('title')}
                  </th>
                  <th onClick={() => handleSort('category')}>
                    Category {getSortIcon('category')}
                  </th>
                  <th onClick={() => handleSort('amount')}>
                    Amount {getSortIcon('amount')}
                  </th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredExpenses.length > 0 ? (
                  filteredExpenses.map(expense => (
                    <tr key={expense._id}>
                      <td>{formatDate(expense.date)}</td>
                      <td>{expense.title}</td>
                      <td>{expense.category}</td>
                      <td>${parseFloat(expense.amount).toFixed(2)}</td>
                      <td>
                        <Button 
                          variant="danger" 
                          size="sm"
                          onClick={() => handleDelete(expense._id)}
                        >
                          <FontAwesomeIcon icon={faTrash} />
                        </Button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="5" className="text-center">
                      No expenses found
                    </td>
                  </tr>
                )}
              </tbody>
            </Table>
          </div>
        </Card.Body>
      </Card>
    </div>
  );
};

export default ExpenseTable;

// File: src/components/ExpenseAnalysis.js
import React, { useState, useEffect } from 'react';
import { Card, Row, Col, Form } from 'react-bootstrap';
import { Pie, Bar } from 'react-chartjs-2';
import axios from 'axios';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  ArcElement,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement
);

const ExpenseAnalysis = () => {
  const [expenses, setExpenses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [timeFrame, setTimeFrame] = useState('month');

  useEffect(() => {
    fetchExpenses();
  }, []);

  const fetchExpenses = async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/expenses');
      setExpenses(response.data);
      setLoading(false);
    } catch (err) {
      setError('Failed to fetch expenses');
      setLoading(false);
    }
  };

  const filterExpensesByTimeFrame = () => {
    const now = new Date();
    let startDate;

    if (timeFrame === 'week') {
      startDate = new Date(now.setDate(now.getDate() - 7));
    } else if (timeFrame === 'month') {
      startDate = new Date(now.setMonth(now.getMonth() - 1));
    } else if (timeFrame === 'year') {
      startDate = new Date(now.setFullYear(now.getFullYear() - 1));
    } else {
      startDate = new Date(0);
    }

    return expenses.filter(expense => new Date(expense.date) >= startDate);
  };

  const getExpensesByCategory = () => {
    const filteredExpenses = filterExpensesByTimeFrame();
    const categories = {};

    filteredExpenses.forEach(expense => {
      if (categories[expense.category]) {
        categories[expense.category] += parseFloat(expense.amount);
      } else {
        categories[expense.category] = parseFloat(expense.amount);
      }
    });

    return categories;
  };

  const getExpensesByMonth = () => {
    const filteredExpenses = filterExpensesByTimeFrame();
    const months = {};

    filteredExpenses.forEach(expense => {
      const date = new Date(expense.date);
      const monthYear = `${date.toLocaleString('default', { month: 'short' })} ${date.getFullYear()}`;

      if (months[monthYear]) {
        months[monthYear] += parseFloat(expense.amount);
      } else {
        months[monthYear] = parseFloat(expense.amount);
      }
    });

    return months;
  };

  const categoryData = getExpensesByCategory();
  const monthData = getExpensesByMonth();

  const pieChartData = {
    labels: Object.keys(categoryData),
    datasets: [
      {
        data: Object.values(categoryData),
        backgroundColor: [
          '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
          '#FF9F40', '#8AC249', '#EA80FC', '#00BCD4', '#FF5722'
        ],
        hoverBackgroundColor: [
          '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
          '#FF9F40', '#8AC249', '#EA80FC', '#00BCD4', '#FF5722'
        ]
      }
    ]
  };

  const barChartData = {
    labels: Object.keys(monthData),
    datasets: [
      {
        label: 'Total Expenses',
        data: Object.values(monthData),
        backgroundColor: '#36A2EB',
      }
    ]
  };

  const pieOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'bottom',
      },
      title: {
        display: true,
        text: 'Expenses by Category'
      }
    }
  };

  const barOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Monthly Expenses'
      }
    }
  };

  if (loading) {
    return <div className="text-center">Loading analysis...</div>;
  }

  const totalExpenses = filterExpensesByTimeFrame().reduce(
    (sum, expense) => sum + parseFloat(expense.amount), 0
  );

  const avgExpensePerCategory = totalExpenses / (Object.keys(categoryData).length || 1);

  return (
    <div>
      <h2 className="text-center mb-4">Expense Analysis</h2>

      <Form.Group className="mb-4">
        <Form.Label>Time Frame</Form.Label>
        <Form.Control
          as="select"
          value={timeFrame}
          onChange={(e) => setTimeFrame(e.target.value)}
        >
          <option value="week">Last Week</option>
          <option value="month">Last Month</option>
          <option value="year">Last Year</option>
          <option value="all">All Time</option>
        </Form.Control>
      </Form.Group>

      <Row>
        <Col lg={4} className="mb-4">
          <Card className="h-100 shadow-sm">
            <Card.Body>
              <Card.Title>Summary</Card.Title>
              <ul className="list-unstyled">
                <li className="mb-2">
                  <strong>Total Expenses:</strong> ${totalExpenses.toFixed(2)}
                </li>
                <li className="mb-2">
                  <strong>Number of Categories:</strong> {Object.keys(categoryData).length}
                </li>
                <li className="mb-2">
                  <strong>Avg. per Category:</strong> ${avgExpensePerCategory.toFixed(2)}
                </li>
                <li className="mb-2">
                  <strong>Top Category:</strong> {
                    Object.keys(categoryData).reduce((a, b) => 
                      categoryData[a] > categoryData[b] ? a : b, '')
                  }
                </li>
              </ul>
            </Card.Body>
          </Card>
        </Col>
        
        <Col lg={8} className="mb-4">
          <Card className="h-100 shadow-sm">
            <Card.Body>
              <Pie data={pieChartData} options={pieOptions} />
            </Card.Body>
          </Card>
        </Col>
      </Row>

      <Row>
        <Col className="mb-4">
          <Card className="shadow-sm">
            <Card.Body>
              <Bar data={barChartData} options={barOptions} />
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default ExpenseAnalysis;

// File: src/components/Help.js
import React from 'react';
import { Card, Accordion } from 'react-bootstrap';

const Help = () => {
  return (
    <div>
      <h2 className="text-center mb-4">Help & Support</h2>
      
      <Card className="mb-4 shadow-sm">
        <Card.Body>
          <h4>Contact the Developers</h4>
          <p>If you need assistance with the Expense Manager application, please contact our developers:</p>
          
          <div className="d-flex flex-wrap">
            <div className="mb-3 me-5">
              <h5>Akshat Shraman Tiwari</h5>
              <p>Phone: +91-7389100645</p>
              <p>Email: akshat@dbsproject.com</p>
            </div>
            
            <div className="mb-3">
              <h5>Saarthak Singhal</h5>
              <p>Phone: +91-7042429175</p>
              <p>Email: saarthak@dbsproject.com</p>
            </div>
          </div>
        </Card.Body>
      </Card>
      
      <Card className="shadow-sm">
        <Card.Body>
          <h4 className="mb-3">Frequently Asked Questions</h4>
          
          <Accordion>
            <Accordion.Item eventKey="0">
              <Accordion.Header>How do I add a new expense?</Accordion.Header>
              <Accordion.Body>
                To add a new expense, click on the "Add Expense" card on the dashboard or navigate to Add Expense from the navigation menu. Fill in the required details like title, amount, category, and date, then click the "Add Expense" button.
              </Accordion.Body>
            </Accordion.Item>
            
            <Accordion.Item eventKey="1">
              <Accordion.Header>How can I view my expense history?</Accordion.Header>
              <Accordion.Body>
                To view your expense history, click on the "Expense Table" card on the dashboard. This will show you a table of all your recorded expenses, which you can sort and filter as needed.
              </Accordion.Body>
            </Accordion.Item>
            
            <Accordion.Item eventKey="2">
              <Accordion.Header>How do I analyze my spending patterns?</Accordion.Header>
              <Accordion.Body>
                Visit the "Expense Analysis" section by clicking on the respective card on the dashboard. Here you'll find visual charts and statistics that help you understand your spending habits across different categories and time periods.
              </Accordion.Body>
            </Accordion.Item>
            
            <Accordion.Item eventKey="3">
              <Accordion.Header>Can I delete or edit an expense?</Accordion.Header>
              <Accordion.Body>
                Yes, you can delete expenses from the Expense Table view by clicking the delete icon next to any expense entry. Editing functionality is coming in a future update.
              </Accordion.Body>
            </Accordion.Item>
            
            <Accordion.Item eventKey="4">
              <Accordion.Header>Is my data secure?</Accordion.Header>
              <Accordion.Body>
                Yes, all your expense data is stored securely in our MongoDB database. We use industry-standard security practices to ensure your financial information remains private.
              </Accordion.Body>
            </Accordion.Item>
          </Accordion>
        </Card.Body>
      </Card>
    </div>
  );
};

export default Help;

// File: src/components/ShareWithFriends.js
import React, { useState } from 'react';
import { Card, Form, Button, Alert } from 'react-bootstrap';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faShare, faCopy } from '@fortawesome/free-solid-svg-icons';

const ShareWithFriends = () => {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const [sent, setSent] = useState(false);
  const [error, setError] = useState('');

  const websiteUrl = 'https://dbsprojectbyakshatandsaarthak.vercel.app';

  const handleSubmit = (e) => {
    e.preventDefault();
    // In a production app, this would call an API endpoint to send an email
    // For this demo, we'll just simulate success
    setTimeout(() => {
      setSent(true);
      setEmail('');
      setMessage('');
    }, 1000);
  };

  const copyLinkToClipboard = () => {
    navigator.clipboard.writeText(websiteUrl)
      .then(() => {
        setError('Link copied to clipboard!');
        setTimeout(() => setError(''), 3000);
      })
      .catch(() => {
        setError('Failed to copy link');
      });
  };

  const shareText = `Check out this awesome Expense Manager app I'm using! It helps me track and analyze all my expenses in one place. Try it out: ${websiteUrl}`;

  return (
    <div>
      <h2 className="text-center mb-4">Share With Friends</h2>
      
      <Card className="shadow-sm mb-4">
        <Card.Body>
          <h4>Share this App</h4>
          <p>Invite your friends to use this expense manager and manage finances together!</p>
          
          <div className="d-flex align-items-center mb-4">
            <Form.Control
              type="text"
              value={websiteUrl}
              readOnly
              className="me-2"
            />
            <Button variant="outline-primary" onClick={copyLinkToClipboard}>
              <FontAwesomeIcon icon={faCopy} />
            </Button>
          </div>
          
          {error && <Alert variant="info">{error}</Alert>}
          
          <div className="mb-4">
            <h5>Share on Social Media</h5>
            <div className="d-flex gap-2">
              <Button 
                variant="primary" 
                href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}`}
                target="_blank"
                rel="noopener noreferrer"
              >
                Twitter
              </Button>
              <Button 
                variant="primary" 
                href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(websiteUrl)}`}
                target="_blank"
                rel="noopener noreferrer"
              >
                Facebook
              </Button>
              <Button 
                variant="success" 
                href={`https://api.whatsapp.com/send?text=${encodeURIComponent(shareText)}`}
                target="_blank"
                rel="noopener noreferrer"
              >
                WhatsApp
              </Button>
            </div>
          </div>
          
          <hr />
          
          <h4>Invite via Email</h4>
          {sent && <Alert variant="success">Invitation sent successfully!</Alert>}
          
          <Form onSubmit={handleSubmit}>
            <Form.Group className="mb-3">
              <Form.Label>Friend's Email</Form.Label>
              <Form.Control
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Enter email address"
                required
              />
            </Form.Group>
            
            <Form.Group className="mb-3">
              <Form.Label>Personal Message (Optional)</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="Add a personal message to your invitation"
              />
            </Form.Group>
            
            <Button variant="primary" type="submit">
              <FontAwesomeIcon icon={faShare} className="me-2" />
              Send Invitation
            </Button>
          </Form>
        </Card.Body>
      </Card>
    </div>
  );
};

export default ShareWithFriends;

// File: src/App.css
// This would contain custom CSS styles for the application
```
